#!/usr/bin/env python3
"""
Creative Muse AI - Schl√ºsselgenerierungs-Skript
Generiert alle notwendigen kryptographischen Schl√ºssel f√ºr das System
"""

import os
import sys
import secrets
import hashlib
from pathlib import Path
from datetime import datetime
import json
import base64
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend
from cryptography.fernet import Fernet
from cryptography import x509
from cryptography.x509.oid import NameOID

# Pfad zum Projektroot hinzuf√ºgen
sys.path.append(str(Path(__file__).parent.parent))

def create_directories():
    """Erstelle notwendige Verzeichnisse"""
    directories = [
        "security/keys",
        "security/certificates", 
        "logs/audit",
        "logs/security",
        "logs/performance",
        "database",
        "backups"
    ]
    
    for directory in directories:
        path = Path(directory)
        path.mkdir(parents=True, exist_ok=True)
        
        # Sichere Berechtigungen setzen
        os.chmod(path, 0o700)
        print(f"‚úÖ Verzeichnis erstellt: {directory}")

def generate_master_key():
    """Generiere Master-Schl√ºssel f√ºr Schl√ºsselverschl√ºsselung"""
    print("\nüîë Generiere Master-Schl√ºssel...")
    
    try:
        keys_dir = Path("security/keys")
        master_key_file = keys_dir / "master.key"
        
        # Master-Schl√ºssel generieren
        master_key = secrets.token_bytes(32)  # 256-bit
        
        # Passwort f√ºr Master-Schl√ºssel (in Produktion: sicher eingeben)
        password = os.getenv('MASTER_KEY_PASSWORD')
        if not password:
            password = input("Master-Key-Passwort eingeben (oder Enter f√ºr Standard): ").strip()
            if not password:
                password = 'creative_muse_default_password'
                print("‚ö†Ô∏è  Standard-Passwort verwendet. In Produktion sollte ein sicheres Passwort verwendet werden!")
        
        # Salt f√ºr Schl√ºsselableitung
        salt = secrets.token_bytes(32)
        
        # Schl√ºsselableitung
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
            backend=default_backend()
        )
        derived_key = kdf.derive(password.encode())
        
        # Master-Schl√ºssel verschl√ºsseln
        fernet = Fernet(base64.urlsafe_b64encode(derived_key))
        encrypted_master = fernet.encrypt(master_key)
        
        # Speichern
        with open(master_key_file, 'wb') as f:
            f.write(encrypted_master)
        
        # Salt separat speichern
        salt_file = keys_dir / "master.salt"
        with open(salt_file, 'wb') as f:
            f.write(salt)
        
        # Berechtigungen setzen
        os.chmod(master_key_file, 0o600)
        os.chmod(salt_file, 0o600)
        
        # Checksum f√ºr Integrit√§t
        checksum = hashlib.sha256(encrypted_master).hexdigest()
        checksum_file = keys_dir / "master.checksum"
        with open(checksum_file, 'w') as f:
            f.write(checksum)
        
        print(f"‚úÖ Master-Schl√ºssel generiert: {master_key_file}")
        print(f"‚úÖ Salt gespeichert: {salt_file}")
        print(f"‚úÖ Checksum: {checksum[:16]}...")
        
        return master_key
        
    except Exception as e:
        print(f"‚ùå Fehler beim Generieren des Master-Schl√ºssels: {e}")
        sys.exit(1)

def generate_application_keys(master_key):
    """Generiere Anwendungsschl√ºssel"""
    print("\nüîê Generiere Anwendungsschl√ºssel...")
    
    keys_to_generate = [
        ("database", "Datenbank-Verschl√ºsselung"),
        ("session", "Session-Verschl√ºsselung"),
        ("file", "Datei-Verschl√ºsselung"),
        ("communication", "Kommunikations-Verschl√ºsselung"),
        ("backup", "Backup-Verschl√ºsselung"),
        ("audit", "Audit-Log-Verschl√ºsselung")
    ]
    
    keys_dir = Path("security/keys")
    fernet = Fernet(base64.urlsafe_b64encode(master_key))
    
    key_metadata = {}
    
    for key_name, description in keys_to_generate:
        try:
            # Schl√ºssel generieren
            key_data = secrets.token_bytes(32)  # 256-bit
            
            # Verschl√ºsseln
            encrypted_key = fernet.encrypt(key_data)
            
            # Speichern
            key_file = keys_dir / f"{key_name}.key"
            with open(key_file, 'wb') as f:
                f.write(encrypted_key)
            
            os.chmod(key_file, 0o600)
            
            # Metadaten
            checksum = hashlib.sha256(key_data).hexdigest()
            key_metadata[key_name] = {
                "description": description,
                "algorithm": "AES-256",
                "key_size": 256,
                "created_at": datetime.utcnow().isoformat(),
                "checksum": checksum,
                "file": str(key_file)
            }
            
            print(f"‚úÖ {description}: {key_file}")
            
        except Exception as e:
            print(f"‚ùå Fehler beim Generieren von {key_name}: {e}")
    
    # Metadaten speichern
    metadata_file = keys_dir / "keys_metadata.json"
    with open(metadata_file, 'w') as f:
        json.dump(key_metadata, f, indent=2)
    
    os.chmod(metadata_file, 0o600)
    print(f"‚úÖ Schl√ºssel-Metadaten: {metadata_file}")

def generate_tls_certificates():
    """Generiere selbstsignierte TLS-Zertifikate f√ºr lokale Kommunikation"""
    print("\nüîí Generiere TLS-Zertifikate...")
    
    try:
        certs_dir = Path("security/certificates")
        
        # Private Key generieren
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
            backend=default_backend()
        )
        
        # Zertifikat-Informationen
        subject = issuer = x509.Name([
            x509.NameAttribute(NameOID.COUNTRY_NAME, "DE"),
            x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, "Local"),
            x509.NameAttribute(NameOID.LOCALITY_NAME, "Local"),
            x509.NameAttribute(NameOID.ORGANIZATION_NAME, "Creative Muse AI"),
            x509.NameAttribute(NameOID.COMMON_NAME, "localhost"),
        ])
        
        # Zertifikat erstellen
        cert = x509.CertificateBuilder().subject_name(
            subject
        ).issuer_name(
            issuer
        ).public_key(
            private_key.public_key()
        ).serial_number(
            x509.random_serial_number()
        ).not_valid_before(
            datetime.utcnow()
        ).not_valid_after(
            datetime.utcnow() + timedelta(days=365)
        ).add_extension(
            x509.SubjectAlternativeName([
                x509.DNSName("localhost"),
                x509.DNSName("127.0.0.1"),
                x509.IPAddress(ipaddress.IPv4Address("127.0.0.1")),
                x509.IPAddress(ipaddress.IPv6Address("::1")),
            ]),
            critical=False,
        ).sign(private_key, hashes.SHA256(), default_backend())
        
        # Private Key speichern
        key_file = certs_dir / "server.key"
        with open(key_file, "wb") as f:
            f.write(private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            ))
        
        # Zertifikat speichern
        cert_file = certs_dir / "server.crt"
        with open(cert_file, "wb") as f:
            f.write(cert.public_bytes(serialization.Encoding.PEM))
        
        # Berechtigungen setzen
        os.chmod(key_file, 0o600)
        os.chmod(cert_file, 0o644)
        
        print(f"‚úÖ TLS Private Key: {key_file}")
        print(f"‚úÖ TLS Zertifikat: {cert_file}")
        
        # Zertifikat-Info speichern
        cert_info = {
            "subject": str(subject),
            "issuer": str(issuer),
            "serial_number": str(cert.serial_number),
            "not_valid_before": cert.not_valid_before.isoformat(),
            "not_valid_after": cert.not_valid_after.isoformat(),
            "fingerprint_sha256": cert.fingerprint(hashes.SHA256()).hex()
        }
        
        info_file = certs_dir / "certificate_info.json"
        with open(info_file, 'w') as f:
            json.dump(cert_info, f, indent=2)
        
        print(f"‚úÖ Zertifikat-Info: {info_file}")
        
    except Exception as e:
        print(f"‚ùå Fehler beim Generieren der TLS-Zertifikate: {e}")

def generate_environment_file():
    """Generiere .env-Datei mit Umgebungsvariablen"""
    print("\nüìù Generiere Umgebungskonfiguration...")
    
    try:
        env_content = f"""# Creative Muse AI - Umgebungsvariablen
# Generiert am: {datetime.utcnow().isoformat()}

# Entwicklungsmodus
DEBUG=false

# Verschl√ºsselung
MASTER_KEY_PASSWORD=creative_muse_default_password

# Datenbank
DATABASE_ENCRYPTION=true
DATABASE_URL=sqlite:///./database/creative_muse.db

# API-Konfiguration
API_HOST=127.0.0.1
API_PORT=8000
USE_TLS=true

# Session-Konfiguration
SESSION_TIMEOUT_MINUTES=30
MAX_CONCURRENT_SESSIONS=1

# Audit-Konfiguration
AUDIT_LEVEL=4
AUDIT_ENCRYPTION=true

# Monitoring
ENABLE_MONITORING=true
METRICS_INTERVAL_SECONDS=30

# Backup-Konfiguration
AUTO_BACKUP=true
BACKUP_INTERVAL_HOURS=24
BACKUP_ENCRYPTION=true

# AI-Modell-Konfiguration
MODEL_NAME=mistralai/Mistral-7B-Instruct-v0.3
MODEL_PATH=./ai_core/models/mistral-7b-instruct
DEVICE=auto
MAX_MEMORY_GB=8

# Sicherheitseinstellungen
ENABLE_CONTENT_FILTER=true
INPUT_MAX_LENGTH=10000
RATE_LIMIT_REQUESTS=60

# Log-Konfiguration
LOG_LEVEL=INFO
LOG_ENCRYPTION=true
LOG_ROTATION_SIZE_MB=100
"""
        
        env_file = Path(".env")
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        os.chmod(env_file, 0o600)
        print(f"‚úÖ Umgebungskonfiguration: {env_file}")
        
        # .env.example f√ºr Repository
        example_content = env_content.replace(
            "MASTER_KEY_PASSWORD=creative_muse_default_password",
            "MASTER_KEY_PASSWORD=your_secure_password_here"
        )
        
        example_file = Path(".env.example")
        with open(example_file, 'w') as f:
            f.write(example_content)
        
        print(f"‚úÖ Beispiel-Konfiguration: {example_file}")
        
    except Exception as e:
        print(f"‚ùå Fehler beim Generieren der Umgebungskonfiguration: {e}")

def create_security_summary():
    """Erstelle Sicherheitszusammenfassung"""
    print("\nüìã Erstelle Sicherheitszusammenfassung...")
    
    try:
        summary = f"""# Creative Muse AI - Sicherheits-Setup Zusammenfassung

## Setup abgeschlossen am: {datetime.utcnow().isoformat()}

### Generierte Schl√ºssel:
- ‚úÖ Master-Schl√ºssel (AES-256, verschl√ºsselt)
- ‚úÖ Datenbank-Verschl√ºsselungsschl√ºssel
- ‚úÖ Session-Verschl√ºsselungsschl√ºssel  
- ‚úÖ Datei-Verschl√ºsselungsschl√ºssel
- ‚úÖ Kommunikations-Verschl√ºsselungsschl√ºssel
- ‚úÖ Backup-Verschl√ºsselungsschl√ºssel
- ‚úÖ Audit-Log-Verschl√ºsselungsschl√ºssel

### TLS-Zertifikate:
- ‚úÖ Selbstsigniertes Server-Zertifikat (RSA-2048)
- ‚úÖ Private Key f√ºr TLS-Kommunikation

### Verzeichnisse:
- ‚úÖ security/keys/ (Schl√ºsselspeicher)
- ‚úÖ security/certificates/ (TLS-Zertifikate)
- ‚úÖ logs/audit/ (Audit-Logs)
- ‚úÖ logs/security/ (Sicherheits-Logs)
- ‚úÖ logs/performance/ (Performance-Logs)
- ‚úÖ database/ (Datenbank-Dateien)
- ‚úÖ backups/ (Backup-Speicher)

### Sicherheitshinweise:

‚ö†Ô∏è  **WICHTIG**: 
1. √Ñndern Sie das Master-Key-Passwort in der .env-Datei
2. Alle Schl√ºsseldateien haben restriktive Berechtigungen (600)
3. Verzeichnisse haben sichere Berechtigungen (700)
4. TLS-Zertifikat ist selbstsigniert (nur f√ºr lokale Entwicklung)

üîí **Produktionsumgebung**:
- Verwenden Sie Hardware Security Modules (HSM) f√ºr Schl√ºsselspeicherung
- Implementieren Sie regelm√§√üige Schl√ºsselrotation
- Verwenden Sie von CA signierte Zertifikate
- Aktivieren Sie alle Audit-Logs
- Implementieren Sie Backup-Verschl√ºsselung

### N√§chste Schritte:
1. F√ºhren Sie `make setup-secure` aus
2. Starten Sie das System mit `make dev-secure`
3. √úberpr√ºfen Sie die Logs in logs/security/
4. F√ºhren Sie Sicherheitstests aus: `make test-security`

### Dateien die NIEMALS committed werden d√ºrfen:
- security/keys/*
- .env
- logs/*
- database/*.db
- backups/*

Alle diese Dateien sind bereits in .gitignore aufgef√ºhrt.
"""
        
        summary_file = Path("SECURITY_SETUP.md")
        with open(summary_file, 'w') as f:
            f.write(summary)
        
        print(f"‚úÖ Sicherheitszusammenfassung: {summary_file}")
        
    except Exception as e:
        print(f"‚ùå Fehler beim Erstellen der Zusammenfassung: {e}")

def main():
    """Hauptfunktion f√ºr Schl√ºsselgenerierung"""
    print("üöÄ Creative Muse AI - Schl√ºsselgenerierung")
    print("=" * 50)
    
    try:
        # 1. Verzeichnisse erstellen
        create_directories()
        
        # 2. Master-Schl√ºssel generieren
        master_key = generate_master_key()
        
        # 3. Anwendungsschl√ºssel generieren
        generate_application_keys(master_key)
        
        # 4. TLS-Zertifikate generieren
        generate_tls_certificates()
        
        # 5. Umgebungskonfiguration erstellen
        generate_environment_file()
        
        # 6. Sicherheitszusammenfassung erstellen
        create_security_summary()
        
        print("\n" + "=" * 50)
        print("‚úÖ Schl√ºsselgenerierung erfolgreich abgeschlossen!")
        print("\nüîí Alle kryptographischen Schl√ºssel wurden sicher generiert.")
        print("üìã Lesen Sie SECURITY_SETUP.md f√ºr weitere Informationen.")
        print("\n‚ö†Ô∏è  WICHTIG: √Ñndern Sie das Master-Key-Passwort in der .env-Datei!")
        
    except Exception as e:
        print(f"\n‚ùå Kritischer Fehler: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # Zus√§tzliche Imports f√ºr TLS-Zertifikate
    import ipaddress
    from datetime import timedelta
    
    main()